//注意边界

public class Solution {
    public int strStr(String haystack, String needle) {
        /*Approach 1*/
        /*
        return haystack.indexOf(needle);
        */
        /*Approach 2*/
        /*
        int h_len = haystack.length();
        int n_len = needle.length();

        if(n_len == 0){
            return 0;
        }
        if(h_len == 0 || h_len<n_len){
            return -1;
        }
        for(int i=0; i<=h_len-n_len; i++){
            if(haystack.substring(i,i+n_len).equals(needle)){
                return i;
            }
        }
        return -1;
        */
        /*Approach 3*/
        
        int h_len = haystack.length();
        int n_len = needle.length();
        
        if(n_len == 0){
            return 0;
        }
        if(h_len == 0 || h_len<n_len){
            return -1;
        }

        for(int i=0; i<=h_len-n_len; i++){
            for(int j=0; j<n_len; j++){
                if(haystack.charAt(i+j) == needle.charAt(j)){
                    if(j==n_len-1){
                        return i;
                    }
                } else{
                    break;
                }
            }
        }
        return -1;
    }
}

//2nd round
public class Solution {
    /*
    public int strStr(String haystack, String needle) {
        return haystack.indexOf(needle);
    }*/
    public int strStr(String haystack, String needle) {
        int lenh=haystack.length();
        int lenn=needle.length();
        if(lenh==0 && lenn ==0)  return 0;
        if(lenh<lenn)  return -1;
        for(int i=0; i<lenh; i++){
            int j;
            for(j=0; j<lenn; j++){
                if(i+j==lenh){
                    return -1;
                }
                if(i+j<lenh && haystack.charAt(i+j)!=needle.charAt(j)){
                    break;
                }
            }
            if(j==lenn){
                return i;
            }
        }
        return -1;
    }
}

//3rd round
public class Solution {
    public int strStr(String haystack, String needle) {
        int h_len=haystack.length();
        int n_len=needle.length();
        for(int i=0;;i++){
            for(int j=0;;j++){
                if(j==n_len)  return i;
                if(i+j==h_len) return -1;
                if(haystack.charAt(i+j)!=needle.charAt(j))   break;
            }
        }
    }
}
