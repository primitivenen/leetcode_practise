

public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle.size()==0) return 0;
        for(int i=triangle.size()-2; i>=0; i--){
            for(int j=0; j<=i; j++){
                List<Integer> nextRow=triangle.get(i+1);
                int sum=Math.min(nextRow.get(j), nextRow.get(j+1))+triangle.get(i).get(j);
                triangle.get(i).set(j, sum);
            }
        }
        return triangle.get(0).get(0);
    }
}


//2nd round

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        for(int i=1; i<triangle.size(); i++){
            for(int j=0; j<triangle.get(i).size(); j++){
                if(j==0) 
                    triangle.get(i).set(j, triangle.get(i).get(j)+triangle.get(i-1).get(j));
                else if(j==triangle.get(i).size()-1)
                    triangle.get(i).set(j, triangle.get(i).get(j)+triangle.get(i-1).get(j-1));
                else
                    triangle.get(i).set(j, triangle.get(i).get(j)+Math.min(triangle.get(i-1).get(j-1),
                            triangle.get(i-1).get(j)));
            }
        }
        int min=Integer.MAX_VALUE;
        for(int k=0; k<triangle.get(triangle.size()-1).size(); k++){
            min=Math.min(min, triangle.get(triangle.size()-1).get(k));
        }
        return min;
    }
}
