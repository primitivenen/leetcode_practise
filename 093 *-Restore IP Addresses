
public class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<String>();
        int len=s.length();
        for(int i=1; i<4 && i<len-2; i++){
            for(int j=i+1; j<i+4 && j<len-1; j++){
                for(int k=j+1; k<j+4 && k<len; k++){
                    String s1=s.substring(0, i), s2=s.substring(i, j), s3=s.substring(j, k), s4=s.substring(k,len);
                    if(isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4))
                        res.add(s1+"."+s2+"."+s3+"."+s4);
                }
            }
        }
        return res;
    }
    public boolean isValid(String s){
        if(s.length()>3 || s.length()==0 || s.charAt(0)=='0' && s.length()>1 || Integer.parseInt(s)>255)
            return false;
        return true;
    }
}


//2nd round

class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<String>();
        helper(res, "", 0, s, 0);
        return res;
    }
    public void helper(List<String> res, String temp, int idx, String s, int count){
        if(count>4) return;
        if(count==4 && idx==s.length()){
            res.add(temp);
        }
        for(int i=1; i<4; i++){
            if(idx+i>s.length())break;
            String str=s.substring(idx,idx+i);
            if((str.startsWith("0")&&str.length()>1)||(i==3 && Integer.parseInt(str)>255)) continue;
            helper(res, temp+str+(count==3?"":"."), idx+i, s,count+1);
        }
    }
}
