/*
既然minstack里的都一样
为什么还要在pop stack的时候把minstack一起pop
为什么pop和stack.peep()一样的值是不对的？*/

public class MinStack {
    private Stack<Integer> stack; 
    private Stack<Integer> minstack;

    /** initialize your data structure here. */
    public MinStack() {
        stack = new Stack<Integer>();
        minstack = new Stack<Integer>();
    }
    
    public void push(int x) {
        stack.push(x);
        if(minstack.isEmpty()){
            minstack.push(x);
        }else{
            minstack.push(Math.min(x,minstack.peek()));
        }
    }
    
    public void pop() { 
        minstack.pop();
        stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        return minstack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

//2nd round
class MinStack {
    Stack<Integer> mystack;
    int min=Integer.MAX_VALUE;
    /** initialize your data structure here. */
    public MinStack() {
        mystack = new Stack<>();
    }
    
    public void push(int x) {
        mystack.add(x);
        if(x<=min)
            min=x;
        mystack.add(min);
    }
    
    public void pop() {
        mystack.pop();
        mystack.pop();
        if(!mystack.empty())
            min=mystack.peek();
        else min=Integer.MAX_VALUE;
        
    }
    
    public int top() {
        if(!mystack.empty()){
            int m=mystack.pop();
            int temp=mystack.peek();
            mystack.add(m);
            return temp;
        }
        return Integer.MAX_VALUE;
    }
    
    public int getMin() {
        if(!mystack.empty())
            return mystack.peek();
        return Integer.MAX_VALUE;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
