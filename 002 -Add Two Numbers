/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head1 = l1;
        ListNode head2 = l2;
        ListNode curr = new ListNode(0);
        ListNode head = curr;
        int carry = 0;
        while(head1!=null||head2!=null|carry!=0){
            int sum = 0;
            int val1=(head1!=null?head1.val:0);
            int val2=(head2!=null?head2.val:0);
            sum=val1+val2+carry;
            ListNode now = new ListNode(sum%10);
            carry=sum/10;
            head1=(head1!=null?head1.next:null);


head2=(head2!=null?head2.next:null);
            curr.next = now;
            curr = curr.next;
        }
        return head.next;
    }
}

//Approach 2

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        ListNode prev = new ListNode(0);
        prev.next=l1;
        ListNode head=prev;
        
        int carry=0;
        while(l2!=null && l1!=null){
            int val = l1.val+l2.val+carry;
            carry=val/10;
            l1.val = val%10;
            prev=l1;
            l1=l1.next;
            l2=l2.next;
        }
        if(l1==null && l2!=null){
            while(l2!=null){
                int val = l2.val+carry;
                carry=val/10;
                ListNode temp = new ListNode(val%10);
                prev.next=temp;
                prev=temp;
                l2=l2.next;
            }
        }
        if(l1!=null && l2==null){
            while(l1!=null){
                int val=l1.val+carry;
                carry=val/10;
                l1.val=val%10;
                prev=l1;
                l1=l1.next;
            }
        }
        
        if(l1==null && l2==null && carry>0){
            ListNode temp = new ListNode(carry);
            prev.next=temp;
        }
        return head.next;
    }

}

//2nd round

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode temp=l1;
        ListNode temp2=l2;
        ListNode ans = new ListNode(0);
        ListNode t =ans;
        
        int carry=0;
        while(temp!=null || temp2!=null || carry!=0){
            int sum=(temp==null?0:temp.val)+(temp2==null?0:temp2.val)+carry;
            
            ListNode cur = new ListNode(sum%10);

            carry=sum/10;
            temp=temp==null?null:temp.next;
            temp2=temp2==null?null:temp2.next;
            ans.next = cur;
            ans = cur;
        }
        return t.next;        
    }
}
