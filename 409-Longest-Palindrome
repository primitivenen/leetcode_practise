
public class Solution {
    public int longestPalindrome(String s) {
        HashMap<String, Integer> hstable = new HashMap<String, Integer>();
        for(int i=0; i < s.length(); i++){
            String key = Character.toString(s.charAt(i));
            if(hstable.containsKey(key)){
                hstable.put(key, hstable.get(key)+1);
            }
            else{
                hstable.put(key, 1);
            }
        }
        int length = 0;
        int tag = 0;
        for(String str: hstable.keySet()){
            int count = hstable.get(str);
            if(count % 2 == 0){
                length += count;
            }
            else{
                tag = 1;
                length = length + count - 1;
            }
        }
        length = length + tag;
        return length;
    }
}

//2nd round

public class Solution {
    /*
     * @param s: a string which consists of lowercase or uppercase letters
     * @return: the length of the longest palindromes that can be built
     */
    public int longestPalindrome(String s) {
        // write your code here
        HashSet<Character> map = new HashSet<>();
        int count=0;
        for(int i=0; i<s.length(); i++){
            char c=s.charAt(i);
            if(map.contains(c)){
                map.remove(c);
                count++;
            }
            else
                map.add(c);
        }
        if(!map.isEmpty())
            return 2*count+1;
        return 2*count;
    }
}
