/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return helper(0, 0, inorder.length-1, preorder, inorder);
    }
    public TreeNode helper(int preStart, int inStart, int inEnd, int[] preorder, int[] inorder){
        if(preStart>preorder.length-1||inStart>inEnd){
            return null;
        }
        TreeNode root=new TreeNode(preorder[preStart]);
        int inIndex=0;
        for(int i=inStart; i<=inEnd; i++){
            if(inorder[i]==root.val){
                inIndex=i;
            }
        }
        root.left=helper(preStart+1, inStart, inIndex-1, preorder, inorder);
        root.right=helper(preStart+inIndex-inStart+1, inIndex+1, inEnd, preorder, inorder);
        return root;
    }
}

//2nd round
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     *@param preorder : A list of integers that preorder traversal of a tree
     *@param inorder : A list of integers that inorder traversal of a tree
     *@return : Root of a tree
     */
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // write your code here
        return helper(preorder, inorder, 0, inorder.length-1, 0);
    }
    public TreeNode helper(int[] preorder, int[] inorder, int inst, int inend, int prest){
        if(inst>inend) return null;
        TreeNode node = new TreeNode(preorder[prest]);
        int iipos=0;
        for(int i=0; i<inorder.length; i++){
            if(inorder[i]==preorder[prest])
                iipos=i;
        }
        node.left=helper(preorder, inorder, inst, iipos-1, prest+1);
        node.right=helper(preorder, inorder, iipos+1, inend, prest+iipos-inst+1);
        return node;
    }
}
