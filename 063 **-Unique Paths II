
//public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int width = obstacleGrid[0].length;
        int[] dp = new int[width];
        dp[0]=1;
        for(int[] row:obstacleGrid){
            for(int j=0; j<width; j++){
                if(row[j]==1){
                    dp[j]=0;
                }
                else if(j>0){
                    dp[j]=dp[j]+dp[j-1];
                }
            }
        }
        return dp[width-1];
    }
}

public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length, n=obstacleGrid[0].length;
        obstacleGrid[0][0]^=1;
        for(int j=1; j<n; j++){
            obstacleGrid[0][j]=obstacleGrid[0][j]==1?0:obstacleGrid[0][j-1];
        }
        for(int i=1; i<m; i++){
            obstacleGrid[i][0]=obstacleGrid[i][0]==1?0:obstacleGrid[i-1][0];
        }
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                obstacleGrid[i][j]=obstacleGrid[i][j]==1?0:obstacleGrid[i][j-1]+obstacleGrid[i-1][j];
            }
        }
        return obstacleGrid[m-1][n-1];
    }
}


//2nd round

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        // write your code here
        int rlen = obstacleGrid.length;
        int clen = obstacleGrid[0].length;
        if(obstacleGrid[0][0]==1 ||obstacleGrid[rlen-1][clen-1]==1)
            return 0;
        int[] dp = new int[clen];
        dp[0]=1;

        for(int i=0; i<rlen; i++){
            for(int j=0; j<clen; j++){
                if(obstacleGrid[i][j]==1){
                    dp[j]=0;
                }
                else if(j>0)
                    dp[j]=dp[j-1]+dp[j];
            }
        }

        return dp[clen-1];
    }
}
