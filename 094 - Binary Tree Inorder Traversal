/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        Stack<TreeNode> mystack = new Stack<TreeNode>();
        TreeNode curr = root;
        while(curr!=null || !mystack.empty()){
            while(curr!=null){
                mystack.add(curr);
                curr=curr.left;
            }
            curr=mystack.pop();
            result.add(curr.val);
            curr=curr.right;
        }
        return result;
    }
}

//approach 2
public class Solution {
    /*
     * @param root: A Tree
     * @return: Inorder in ArrayList which contains node values.
     */
    public List<Integer> inorderTraversal(TreeNode root) {
        // write your code here
        List<Integer> res = new ArrayList<Integer>();
        if(root==null) return res;
        visit(root, res);
        return res;
    }   
    public void visit(TreeNode root, List<Integer> res){
        if(root==null) return;
        visit(root.left, res);
        res.add(root.val);
        visit(root.right, res);
    }
}
