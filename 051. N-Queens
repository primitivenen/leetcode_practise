public class Solution {
    /*
     * @param n: The number of queens
     * @return: All distinct solutions
     */
    public List<List<String>> solveNQueens(int n) {
        // write your code here
        char[][] board = new char[n][n];
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++)
                board[i][j]='.';
        }
        List<List<String>> res = new ArrayList<List<String>>();
        dfs(res, board, 0);
        return res;
    }
    public void dfs(List<List<String>> res, char[][] board, int col){
        int n=board.length;
        if(col==n){
            res.add(build(board));
            return;
        }
        for(int i=0; i<n; i++){
            if(isValid(board, i, col)){
                board[i][col]='Q';
                dfs(res, board, col+1);
                board[i][col]='.';
            }
        }
    }
    public boolean isValid(char[][] board, int row, int col){
        for(int i=0; i<board.length; i++){
            for(int j=0; j<col; j++){
                if(board[i][j]=='Q' && (i+col==j+row || i+j == col+row || i==row))
                    return false;
            }
        }
        return true;
    }
    public List<String> build(char[][] board){
        List<String> res = new ArrayList<String>();
        for(int i=0;i<board.length; i++){
            String s=new String(board[i]);
            res.add(s);
        }
        return res;
    }
}
