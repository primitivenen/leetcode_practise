

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 // Next 是一个指针，next改变就改变指向
public class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode list = new ListNode(0);  //构建一个指向head的pseudo-node，避免需要单独处理head
        list.next = head; 
        ListNode ln = list;
        while(ln.next!=null){ //判断是不是最后一个结点
            if(ln.next.val==val){
                ln.next=ln.next.next;  // 不理解
            } else{
                ln = ln.next;  //没有改变任何link list的结构，只是让这个变量指向下一个结点
            }
        }
        return list.next;  //指向head，不能返回head，因为head有可能被删除
    }
}


public class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode dummy = new ListNode(Integer.MAX_VALUE);
        dummy.next=head;
        ListNode prev=dummy;
        ListNode p=dummy.next;
        while(p!=null){
            ListNode temp = p.next;
            if(p.val==val){
                prev.next=temp;
                p=temp;
            }else{
                prev=p;
                p=temp;
            }
        }
        return dummy.next;
    }
}

//2nd round

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeElements(ListNode head, int val) {
        ListNode temp = new ListNode(0);
        temp.next=head;
        ListNode temp2 = temp;
        while(temp.next!=null){
            if(temp.next.val==val){
                ListNode t = temp.next.next;
                temp.next=t;
            }else if(temp.next.next==null)
                break;
            else
                temp=temp.next;
        }
        return temp2.next;        
    }
}
