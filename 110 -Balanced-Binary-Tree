\/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        
        if(height(root.left)>height(root.right)+1 || height(root.right)>height(root.left)+1){
            return false;
        }
        
        return isBalanced(root.left) && isBalanced(root.right);
        //return true;
    }
    public int height(TreeNode node){
        if(node == null){
            return 0;
        }
        //if(node.left != null && node.right!=null){
        return Math.max(height(node.left),height(node.right))+1;
        //} 
        //if(node.left == null && node.right == null){
        //    return 1;
        //}
        
    }
}

//2nd round

public class Solution {
    /*
     * @param root: The root of binary tree.
     * @return: True if this Binary tree is Balanced, or false.
     */
    public boolean isBalanced(TreeNode root) {
        // write your code here
        if(root==null) return true;
        TreeNode left=root.left;
        TreeNode right=root.right;
        if(Math.abs(getDepth(left)-getDepth(right))>1)
            return false;
        return isBalanced(left) && isBalanced(right);
    }
    public int getDepth(TreeNode node){
        if(node==null)
            return 0;
        return 1+Math.max(getDepth(node.left),getDepth(node.right));
    }
}
