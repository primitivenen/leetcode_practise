

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head==null) return null;
        ListNode dummy = new ListNode(0);
        dummy.next=head;
        ListNode pre=dummy;
        for(int i=0; i<m-1; i++){
            pre=pre.next;
        }
        ListNode start = pre.next;
        ListNode then = start.next;
        for(int i=0; i<n-m; i++){
            start.next=then.next;
            then.next=pre.next;
            pre.next=then;
            then=start.next;
        }
        return dummy.next;
    }
}


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head==null || head.next==null ||m==n)
            return head;
        ListNode dumb = new ListNode(0);
        dumb.next=head;
        ListNode prev=dumb;
        int count=1;
        while(count<m){
            prev=prev.next;
            count++;
        }
        
        ListNode start=prev.next;
        ListNode then = start.next; 
        while(count<n){
            ListNode temp=then.next;
            then.next=prev.next;
            prev.next=then;
            start.next=temp;
            then=start.next;
            count++;
        }
        return dumb.next;
    }
}


//2nd round
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null) return null;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode pre = dummy, cur = head;
        int k = 1;
        while(cur.next != null && k != m){
            cur = cur.next;
            pre = pre.next;
            k++;
        }

        while(cur.next != null && k != n){
            ListNode preNext = pre.next;
            pre.next = cur.next;
            ListNode next = cur.next;
            cur.next = next.next;
            next.next = preNext;
            k++;
        }

        return dummy.next;
    }
}
